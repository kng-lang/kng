// if a function is called asynchronously, the compiler generates a duplicate version of the function that returns a promise
// and will implicitly unwrap the promise



io : @include "io";


counter := 0;


job1 : fn() void {
    io.println("job1 counter = {}", counter);
}

job2 : fn(_ : s32 = 0) s32{
    io.println("job2 counter = {}", counter);
}


job3 : fn() Promise<s32> {
    return Promise{
        value = 123,
        resolved = false
    }
}


while true {





    // will run at the same time as they don't depend on each other
    async job1();
    async job2();


    // will wait for job1 as job2 depends on job1
    x := async job1();
    async job2(x);
}